@using Nop.Core
@using Nop.Services.Configuration

@inject IStoreContext storeContext
@inject ISettingService settingService

@{
    Layout = "_Root";

    var controllerName = Url.ActionContext.RouteData.Values["controller"].ToString();
    var actionName = Url.ActionContext.RouteData.Values["action"].ToString();

    //current category ID
    var currentCategoryId = 0;
    if (controllerName.Equals("catalog", StringComparison.InvariantCultureIgnoreCase) && actionName.Equals("category", StringComparison.InvariantCultureIgnoreCase))
    {
        currentCategoryId = Convert.ToInt32(Url.ActionContext.RouteData.Values["categoryId"].ToString());
    }

    //current manufacturer ID
    var currentManufacturerId = 0;
    if (controllerName.Equals("catalog", StringComparison.InvariantCultureIgnoreCase) && actionName.Equals("manufacturer", StringComparison.InvariantCultureIgnoreCase))
    {
        currentManufacturerId = Convert.ToInt32(Url.ActionContext.RouteData.Values["manufacturerId"].ToString());
    }

    //current product ID
    var currentProductId = 0;
    if (controllerName.Equals("product", StringComparison.InvariantCultureIgnoreCase) && actionName.Equals("productdetails", StringComparison.InvariantCultureIgnoreCase))
    {
        currentProductId = Convert.ToInt32(Url.ActionContext.RouteData.Values["productId"].ToString());
    }

    var currentStoreId = storeContext.CurrentStore.Id;
    var isOneColumn = settingService.GetSettingByKey("minimalthemesettings.iscategorypageonecolumn", false, currentStoreId, true);

    if (controllerName.Equals("order", StringComparison.InvariantCultureIgnoreCase) ||
        controllerName.Equals("blog", StringComparison.InvariantCultureIgnoreCase) ||
        (controllerName.Equals("catalog", StringComparison.InvariantCultureIgnoreCase) &&
        actionName.Equals("producttagsall", StringComparison.InvariantCultureIgnoreCase)) ||
        controllerName.Equals("richblogsearch", StringComparison.InvariantCultureIgnoreCase))
    {
        isOneColumn = false;
    }

    var isAccountPage = controllerName.Equals("customer", StringComparison.InvariantCultureIgnoreCase) ||
        controllerName.Equals("pricematch", StringComparison.InvariantCultureIgnoreCase) ||
        controllerName.Equals("helpdesk", StringComparison.InvariantCultureIgnoreCase) ||
        (controllerName.Equals("backinstocksubscription", StringComparison.InvariantCultureIgnoreCase) &&
                        actionName.Equals("customersubscriptions", StringComparison.InvariantCultureIgnoreCase)) ||
        (controllerName.Equals("order", StringComparison.InvariantCultureIgnoreCase) &&
                        actionName.Equals("customerorders", StringComparison.InvariantCultureIgnoreCase)) ||
        (controllerName.Equals("order", StringComparison.InvariantCultureIgnoreCase) &&
                        actionName.Equals("customerrewardpoints", StringComparison.InvariantCultureIgnoreCase)) ||
        (controllerName.Equals("boards", StringComparison.InvariantCultureIgnoreCase) &&
                        actionName.Equals("customerforumsubscriptions", StringComparison.InvariantCultureIgnoreCase)) ||
        (controllerName.Equals("vendor", StringComparison.InvariantCultureIgnoreCase) &&
                        actionName.Equals("info", StringComparison.InvariantCultureIgnoreCase)) ||
        (controllerName.Equals("product", StringComparison.InvariantCultureIgnoreCase) &&
                        actionName.Equals("CustomerProductReviews", StringComparison.InvariantCultureIgnoreCase)) ||
        (controllerName.Equals("returnrequest", StringComparison.InvariantCultureIgnoreCase) &&
                        actionName.Equals("customerreturnrequests", StringComparison.InvariantCultureIgnoreCase));

    if (isAccountPage)
    {
        isOneColumn = false;
    }
}

@if (IsSectionDefined("CategoryTop"))
{
    @RenderSection("CategoryTop")
}

@if (IsSectionDefined("Breadcrumb"))
{
    @section Breadcrumb {
        @RenderSection("Breadcrumb")
    }
}

@if (isOneColumn)
{
    if (IsSectionDefined("MinimalPageTitle"))
    {
        @RenderSection("MinimalPageTitle")
    }

    <div class="center-side-wrapper onecolumn">
        <div class="center-1">

            @if (controllerName.Equals("catalog", StringComparison.InvariantCultureIgnoreCase) && !actionName.Equals("search", StringComparison.InvariantCultureIgnoreCase))
            {
                @await Component.InvokeAsync("Widget", new { widgetZone = "minimal_theme_ajax_filters" })
            }

            <div class="center-grid">
                @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.MainColumnBefore })

                @RenderBody()

                <div class="blocks-wrapper">
                    @await Component.InvokeAsync("CategoryNavigation", new { currentCategoryId = currentCategoryId, currentProductId = currentProductId })
        			@await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.LeftSideColumnAfterCategoryNavigation })
                    @await Component.InvokeAsync("ManufacturerNavigation", new { currentManufacturerId = currentManufacturerId })
                    @await Component.InvokeAsync("VendorNavigation")
                    @await Component.InvokeAsync("RecentlyViewedProductsBlock", new { productThumbPictureSize = 64 })
                    @await Component.InvokeAsync("PopularProductTags")
                    @await Component.InvokeAsync("PollBlock", new { systemKeyword = "LeftColumnPoll" })
                </div>

                @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.MainColumnAfter })
            </div>
        </div>
    </div>
}
else
{
    if (IsSectionDefined("MinimalPageTitle"))
    {
        @RenderSection("MinimalPageTitle")
    }

    <div class="center-side-wrapper twocolumns">
        @if (isAccountPage)
        {
            <div class="side-2">
                @RenderSection("left")
            </div>
        }
        <div class="center-2">
            @await Component.InvokeAsync("Widget", new { widgetZone = "main_column_before" })
            @RenderBody()
            @await Component.InvokeAsync("Widget", new { widgetZone = "main_column_after" })
        </div>

        @if (!isAccountPage)
        {
            <div class="side-2">
                @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.LeftSideColumnBefore })
                @await Component.InvokeAsync("Widget", new { widgetZone = "minimal_theme_ajax_filters" })
                @await Component.InvokeAsync("CategoryNavigation", new { currentCategoryId = currentCategoryId, currentProductId = currentProductId })
                @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.LeftSideColumnAfterCategoryNavigation })
                @await Component.InvokeAsync("ManufacturerNavigation", new { currentManufacturerId = currentManufacturerId })
                @await Component.InvokeAsync("VendorNavigation")
                @await Component.InvokeAsync("RecentlyViewedProductsBlock", new { productThumbPictureSize = 64 })
                @await Component.InvokeAsync("PopularProductTags")
                @await Component.InvokeAsync("PollBlock", new { systemKeyword = "LeftColumnPoll" })
                @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.LeftSideColumnAfter })
            </div>
        }
    </div>
}
@using Nop.Core
@using Nop.Services.Configuration

@inject IStoreContext storeContext
@inject ISettingService settingService

@{
    var isMenuMobile = settingService.GetSettingByKey("minimalthemesettings.ismenumobile", true, storeContext.CurrentStore.Id, true);
    var headerClass = isMenuMobile ? "mobile" : "normal";
}

<div class="header @headerClass">
	@await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.HeaderBefore })
   
    @await Component.InvokeAsync("Logo")

    @if (!isMenuMobile)
    {
        var menuHtml = await Component.InvokeAsync("Widget", new { widgetZone = "theme_header_menu" });
        <div class="header-menu-parent-outer">
            <div class="header-menu">
                <div class="close-menu">
                    <span>@T("SevenSpikes.Themes.Common.CloseMenu")</span>
                </div>

                @if (!String.IsNullOrEmpty(menuHtml.ToHtmlString()))
                {
                    @menuHtml
                }
                else
                {
                    @await Component.InvokeAsync("TopMenu")
                }
            </div>
        </div>
    }

    <div class="responsive-nav-wrapper-parent @(Context.Request.Path == "/" ? "logo-white" : "")">
        
        <div class="responsive-nav-wrapper">
            <div class="search-wrap">
                <span>@T("Search")</span>
            </div>
            <div class="filters-button">
                <span>@T("SevenSpikes.Themes.Common.Filters")</span>
            </div>
            <div class="personal-button" id="header-links-opener">
                <span>@T("SevenSpikes.Themes.Common.Personal")</span>
            </div>
            <div class="shopping-cart-link">
                <a href="@Url.RouteUrl("ShoppingCart")">@T("ShoppingCart")</a>
            </div>
            <div class="menu-title">
                <span>@T("SevenSpikes.Themes.Common.MenuTitle")</span>
            </div>
        </div>
        <div class="search-box store-search-box">
            @await Component.InvokeAsync("SearchBox")
        </div>
        @await Component.InvokeAsync("FlyoutShoppingCart")
    </div>

    <div class="header-links-wrapper">
        <div class="header-selectors">
            @await Component.InvokeAsync("CurrencySelector")
            @await Component.InvokeAsync("LanguageSelector")
            @await Component.InvokeAsync("TaxTypeSelector")
        </div>
        @await Component.InvokeAsync("HeaderLinks")

        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.HeaderSelectors })
    </div>
    @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.HeaderAfter })
</div>